import React, { useState, useEffect } from "react";
import "./App.css";
import Square from "./Square/Square";
import { io } from "socket.io-client";
import Swal from "sweetalert2";

//import AWS from 'aws-sdk';

//var AWS = require("aws-sdk");
//AWS.config.update({
//	accessKeyId: "7l6djo4n97lh9sf1dnai5gafgh",
//	secretAccessKey: "8mgsc7600s1vip07boivjr6an28he8acq54tbb7v",
//	region: "us-east-1"
//});

const renderFrom = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];

const App = () => {
  const [gameState, setGameState] = useState(renderFrom);
  const [currentPlayer, setCurrentPlayer] = useState("circle");
  const [finishedState, setFinishetState] = useState(false);
  const [finishedArrayState, setFinishedArrayState] = useState([]);
  const [playOnline, setPlayOnline] = useState(false);
  const [socket, setSocket] = useState(null);
  const [playerName, setPlayerName] = useState("");
  const [opponentName, setOpponentName] = useState(null);
  const [playingAs, setPlayingAs] = useState(null);
	
	//const COGNITO_CLIENT = new AWS.CognitoIdentityServiceProvider({
	//  apiVersion: "2016-04-19",
	//  region: "us-east-1"
	//});
	
	//const createUser = (username, email, password) => {
	//	var poolData = {
	//		UserPoolId: "XXXXXXXXX",
	//		Username: username,
	//		DesiredDeliveryMediums: ["EMAIL"],
	//		TemporaryPassword: password,
	//		UserAttributes: [
	//			{
	//				Name: "email",
	//				Value: email
	//			},
	//			{
	//				Name: "email_verified",
	//				Value: "true"
	//			}
	//		]
	//	};
	//	
	//	COGNITO_CLIENT.adminCreateUser(poolData, (error, data) => {
	//		console.log(error);
	//		console.log(data);
	//		callback(null, {
	//			statusCode: 200,
	//			body: JSON.stringify(data)
	//		});
	//	});
	//};

  const checkWinner = () => {
    // row dynamic
    for (let row = 0; row < gameState.length; row++) {
      if (
        gameState[row][0] === gameState[row][1] &&
        gameState[row][1] === gameState[row][2]
      ) {
        setFinishedArrayState([row * 3 + 0, row * 3 + 1, row * 3 + 2]);
        return gameState[row][0];
      }
    }

    // column dynamic
    for (let col = 0; col < gameState.length; col++) {
      if (
        gameState[0][col] === gameState[1][col] &&
        gameState[1][col] === gameState[2][col]
      ) {
        setFinishedArrayState([0 * 3 + col, 1 * 3 + col, 2 * 3 + col]);
        return gameState[0][col];
      }
    }

    if (
      gameState[0][0] === gameState[1][1] &&
      gameState[1][1] === gameState[2][2]
    ) {
      return gameState[0][0];
    }

    if (
      gameState[0][2] === gameState[1][1] &&
      gameState[1][1] === gameState[2][0]
    ) {
      return gameState[0][2];
    }

    const isDrawMatch = gameState.flat().every((e) => {
      if (e === "circle" || e === "cross") return true;
    });

    if (isDrawMatch) return "draw";

    return null;
  };

  useEffect(() => {
    const winner = checkWinner();
    if (winner) {
      setFinishetState(winner);
    }
  }, [gameState]);

  const takePlayerName = async () => {
    const result = await Swal.fire({
		title: "Login",
		html: `
            <input type="text" id="username" class="swal2-input" placeholder="Username">
            <input type="password" id="password" class="swal2-input" placeholder="Password">
        `,
		showCancelButton: true,
		showDenyButton: true,
        confirmButtonText: 'OK',
        cancelButtonText: 'Cancel',
        denyButtonText: 'Register',
        preConfirm: () => {
            const username = Swal.getPopup().querySelector('#username').value;
            const password = Swal.getPopup().querySelector('#password').value;
            if (!username || !password) {
                Swal.showValidationMessage(`Please enter both username and password`);
            }
            return username;
        }
    }).then((loginResult) => {
        if (loginResult.isConfirmed) {
            const { username, password } = loginResult.value;
            // Handle login with username and password
            console.log(`Username: ${username}, Password: ${password}`);
			
			return loginResult;
        } else if (loginResult.isDenied) {
            // Show registration form
            return showRegistrationForm();
        }
    });

    return result;
  };
  
	const showRegistrationForm = async () => {
		const result = Swal.fire({
			title: 'Register',
			html: `
				<input type="text" id="new-username" class="swal2-input" placeholder="Username">
				<input type="text" id="new-email" class="swal2-input" placeholder="Email">
				<input type="password" id="new-password" class="swal2-input" placeholder="Password">
				<input type="password" id="confirm-password" class="swal2-input" placeholder="Confirm Password">
			`,
			showCancelButton: true,
			confirmButtonText: 'Register',
			preConfirm: () => {
				const username = Swal.getPopup().querySelector('#new-username').value;
				const email = Swal.getPopup().querySelector('#new-email').value;
				const password = Swal.getPopup().querySelector('#new-password').value;
				const confirmPassword = Swal.getPopup().querySelector('#confirm-password').value;
				if (!username || !email || !password || !confirmPassword) {
					Swal.showValidationMessage(`Please fill out all fields`);
				} else if (password !== confirmPassword) {
					Swal.showValidationMessage(`Passwords do not match`);
				}
				return { username: username, email: email, password: password };
			}
		}).then((loginResult) => {
			if (loginResult.isConfirmed) {
				const { username, email, password } = loginResult.value;
				// Handle registration with username and password
				console.log(`New Username: ${username}, New Email: ${email}, New Password: ${password}`);
				
				createUser(username, email, password);
				
				return username;
			}
		});
		
		return result;
	}

  socket?.on("opponentLeftMatch", () => {
    setFinishetState("opponentLeftMatch");
  });

  socket?.on("playerMoveFromServer", (data) => {
    const id = data.state.id;
    setGameState((prevState) => {
      let newState = [...prevState];
      const rowIndex = Math.floor(id / 3);
      const colIndex = id % 3;
      newState[rowIndex][colIndex] = data.state.sign;
      return newState;
    });
    setCurrentPlayer(data.state.sign === "circle" ? "cross" : "circle");
  });

  socket?.on("connect", function () {
    setPlayOnline(true);
  });

  socket?.on("OpponentNotFound", function () {
    setOpponentName(false);
  });

  socket?.on("OpponentFound", function (data) {
    setPlayingAs(data.playingAs);
    setOpponentName(data.opponentName);
  });

  async function playOnlineClick() {
    const result = await takePlayerName();

    if (!result.isConfirmed) {
      return;
    }

    const username = result.value;
    setPlayerName(username);

    const newSocket = io(`http://${window.location.hostname}:3000`, {
      autoConnect: true,
    });

    newSocket?.emit("request_to_play", {
      playerName: username,
    });

    setSocket(newSocket);
  }

  if (!playOnline) {
    return (
      <div className="main-div">
        <button onClick={playOnlineClick} className="playOnline">
          Play Online
        </button>
      </div>
    );
  }

  if (playOnline && !opponentName) {
    return (
      <div className="waiting">
        <p>Waiting for opponent</p>
      </div>
    );
  }

  return (
    <div className="main-div">
      <div className="move-detection">
        <div
          className={`left ${
            currentPlayer === playingAs ? "current-move-" + currentPlayer : ""
          }`}
        >
          {playerName}
        </div>
        <div
          className={`right ${
            currentPlayer !== playingAs ? "current-move-" + currentPlayer : ""
          }`}
        >
          {opponentName}
        </div>
      </div>
      <div>
        <h1 className="game-heading water-background">Tic Tac Toe</h1>
        <div className="square-wrapper">
          {gameState.map((arr, rowIndex) =>
            arr.map((e, colIndex) => {
              return (
                <Square
                  socket={socket}
                  playingAs={playingAs}
                  gameState={gameState}
                  finishedArrayState={finishedArrayState}
                  finishedState={finishedState}
                  currentPlayer={currentPlayer}
                  setCurrentPlayer={setCurrentPlayer}
                  setGameState={setGameState}
                  id={rowIndex * 3 + colIndex}
                  key={rowIndex * 3 + colIndex}
                  currentElement={e}
                />
              );
            })
          )}
        </div>
        {finishedState &&
          finishedState !== "opponentLeftMatch" &&
          finishedState !== "draw" && (
            <h3 className="finished-state">
              {finishedState === playingAs ? "You " : finishedState} won the
              game
            </h3>
          )}
        {finishedState &&
          finishedState !== "opponentLeftMatch" &&
          finishedState === "draw" && (
            <h3 className="finished-state">It's a Draw</h3>
          )}
      </div>
      {!finishedState && opponentName && (
        <h2>You are playing against {opponentName}</h2>
      )}
      {finishedState && finishedState === "opponentLeftMatch" && (
        <h2>You won the match, Opponent has left</h2>
      )}
    </div>
  );
};

export default App;
